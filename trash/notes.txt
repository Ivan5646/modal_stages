1) change state on click? to display different contnt
2) next back buttons
3) clickable stage numbers

So just follow the react_steps structure?


remembering the problem... The problem is how do I keep the state in top component if in buttons comp there were click handlers that were supposed to change the state, they could change it if the state was inside buttons comp of course, but otherwise? What I need is to keep the state in the top comp, so for ex. to change the displayed stage which is different comp. 


Questions
- how to add css class to a component

Problems
- onclick event inside one component event hanlder inside another?
- calling inside component (but not inside any component's function) console.log("initial state"); giving Uncaught SyntaxError: Inline Babel script: Unexpected token 
newboston Boileplate
- when changing js file have to rerun build command and restsrt server wtf?


Problems Solved
- Uncaught TypeError: Cannot read property 'state' of undefined
console.log(stage);
next() {
console.log("next clicked");
//this.setState({ stage: this.state.stage + 1});  // increment state.stage
var stage = this.state.stage; // Uncaught TypeError: Cannot read property 'state' of undefined
console.log(stage);
}

https://stackoverflow.com/questions/45998744/react-this-state-is-undefined
Solved by putting     this.next = this.next.bind(this);    in component constructor


react_steps https://github.com/Srdjan/react-multistep  App structure 
stepone, steptwo, ... => index.js && miltustep.js => ../../index.js => app.js => index.html

Multistep.js is the top comp which contains state... it controlls button


Multisteps is the one way, every step has its own class with the same structure (repeatedly... wtf?). I need "do not repeat yourself" of course, and it seems that app uses React in a shitty way since its every stage is a new class... Well I can try this way anyway, because I have not found better app and I have not figured out how to do better myself.



On React learning path
Seems like with steps is too tough for me?.. 
Bucky has too simple tutorials...? https://www.youtube.com/watch?v=TWzA2Ir1ZJc&list=PL6gx4Cwl9DGBuKtLgPR_zWYnrwv-JllpA&index=9  refs
Ok, seems like Bucky's tuts has some good points at the end, so probably try their code out and understand what is happening in code. Yeah but no scource code available so I will have to spend a hell of a lot of time typing it? And in the end it will turn out to be a crappy tut, becasue now I can't undersstand it thoroughly.

Ok, figured out how to pass a function from parent comp to child comp from Bucky's tut. Next: either write my modal steps, either watch Bucky's redux. I think I should try modal steps first and see how I go, if not then redux or maybe something easier to write myself.


------Bucky Tutorials Branch-----
the only source code?
https://github.com/buckyroberts/Source-Code-from-Tutorials/blob/master/React/005_events.html

So Bucky's tuts has old syntax...

https://stackoverflow.com/questions/30668326/what-is-the-difference-between-using-constructor-vs-getinitialstate-in-react-r

App Structure.
Comment comp is a child comp. Board is a parent comp.

Scope
- show all stages, highlight active stage. For now just make static, afterwards generate dynamically
- finish off with css
 just make basic layout for now, when logics will be finished make a fancy css, maybe just take a template from somewhere (can take those modal_stages)
- clickable stages
- write a fucntion converting array to object


Scope done
- limit stages to 1 and max number, so it won't go 0 and minus..


App Logics
в ModalWindow в render method передается <Stages stage={Stage} stages={stages}/> c state и <Buttons/> в котором передаются хэндлеры (которые находятся в ModalWindow и в которых меняется state)


Problem
- nothing in main.css compiled file?

- Have to pass data array to top comp (ModalWindow) state to use it the same way as the stage.
https://stackoverflow.com/questions/34117735/convert-array-of-objects-to-object-of-objects

- Uncaught TypeError: this.props.updateCommentText is not a function. Well how to pass a function as props from parent comp to child comp. It is possible?
? https://stackoverflow.com/questions/32317154/react-uncaught-typeerror-cannot-read-property-setstate-of-undefined <button onClick={this.delta.bind(this)}>+</button>

- updateCommentText={this.updateComment}  Cannot read property 'updateComment' of undefined, no error if "this" replaced by class Name
Solved by
this.eachComment = this.eachComment.bind(this);  in constructor 
{this.updateComment.bind(this)} in <Comment/> instead of {Board.updateComment.bind(this)}

- webpack scss to css. I will leave it for later. For now just use css.

Problems solved
- webpack scss to sass
https://medium.com/a-beginners-guide-for-webpack-2/using-sass-9f52e447c5ae
node-sass won't install
 Error: Can't find Python executable "python", you can set the PYTHON env variable.
 https://github.com/felixrieseberg/windows-build-tools/issues/56
 successfully installed python waiting for installers   https://github.com/felixrieseberg/windows-build-tools/issues/16

- When onclick next fires state.stage is not incremented at once... What does it mean, state.stage assigned first when next fires? then increments. Solved by this.setState({ stage: this.state.stage += 1});


 Stopped at
https://www.youtube.com/watch?v=szmS_M-BMls 12 - Passing Function as Props  4:42


webpack scss to sass
https://medium.com/a-beginners-guide-for-webpack-2/using-sass-9f52e447c5ae
So webpack imports scss to app.js import '../scss/main.scss'; and no output file?




 Notes to React reference
 https://youtu.be/GBoJOVNzc_0?t=3m12s  child component

 https://youtu.be/szmS_M-BMls?t=1m6s using function in one comp from another comp.
 Passing a function from parent comp to chid comp https://github.com/Ivan5646/modal_stages/commit/0a956d1f62150b8194e00b9c7548c59969394e92

// child Comment insdie parent Board
<Comment key={i} index={i} updateCommentText={this.updateComment.bind(this)} deleteFromBoard={this.removeComment.bind(this)}>
	{text}
</Comment>

//child
save() {
    this.props.updateCommentText(this.refs.newText.value, this.props.index);  //Board.updateComment(newText, i)
    this.setState({editing: false});
}


//
bind 
means binds class "this" to handler in a simple situation like my modal steps

webpack scss to sass
https://medium.com/a-beginners-guide-for-webpack-2/using-sass-9f52e447c5ae